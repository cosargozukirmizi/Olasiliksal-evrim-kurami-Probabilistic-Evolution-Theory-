/*

Copyright (C) 2015  Cosar Gozukirmizi

    
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/

/* ********************************* */
/* Bu betik, sag yani ikinci derece  */
/* cokcokterimli olan bir 2 bilinme- */
/* yenli dizgenin olasiliksal evrim  */
/* yaklasimi ve degismezlik eklenim- */ 
/* li uzay genisletimi ile cozumu i- */ 
/* cin atilan adimlari icermektedir. */
/* bita ve ksi eniyileyimi eklenmis- */
/* tir. Ksi, DEUG baglaminda eklem-  */
/* lenen sayildir.                   */
/* Son guncelleyim: 24 Agustos 2015  */
/* ********************************* */

package("Squtelmat"):
package("Pet"):
DIGITS:=40:

/* ********************************* */
/* Goreturev isleclerinin tanimi     */
/* ********************************* */

D1 := (y) -> diff(y,x1):
D2 := (y) -> diff(y,x2):

/* ********************************* */
/* Sag yan islevlerinin belirtimi    */
/* ********************************* */

r1:= (x1,x2)-> x1+x2+x1*x2:
r2:= (x1,x2)-> x1-x2^2+1:

Mat := Dom::Matrix():

/* ********************************* */
/* Yonelegim yoneyinin tanimi        */
/* ********************************* */

GradYoneyi := () -> Mat([[args()]]):

/* ********************************* */
/* Sag yan isleverini iceren yoney   */
/* ********************************* */

R := ()-> Mat([r1(args()),r2(args())]):

/* ********************************* */
/* Islec yoneyinin iccarpim ile yo-  */
/* neye etki ettirimi		     */
/* ********************************* */

uygula := proc(u_gy, u_f)
begin
 u_retvec:=Mat(nops(u_gy),1):
  for u_i from 1 to nops(u_gy) do
   u_retvec[u_i]:=u_gy[u_i](u_f)
  end_for:
 return(u_retvec):
end_proc:

/* ********************************* */
/* Islec yoneyinin Kronecker uslusu- */
/* nun belirlenimi 		     */
/* ********************************* */

kroneckerPowerOp := proc(krpo_u,krpo_j)
begin
 if krpo_j = 0 then 
  print("kroneckerPowerOp not defined for 0"):
 end_if:
 krpo_ret_vec:=krpo_u:
 if krpo_j = 1 then 
  return( krpo_ret_vec ):
 end_if:
  
 for krpo_it1 from 2 to krpo_j do
  krpo_ret_vec2:=Mat(nops(krpo_ret_vec)
               *nops(krpo_u),1):
  krpo_ind:=1:  
  for krpo_it2 from 1 to nops(krpo_ret_vec) do 
   for krpo_it3 from 1 to nops(krpo_u) do
    krpo_ret_vec2[krpo_ind]:=krpo_ret_vec[krpo_it2] \
                            @ krpo_u[krpo_it3]:
    krpo_ind:=krpo_ind+1:
   end_for:    
  end_for:
  krpo_ret_vec:=krpo_ret_vec2:  
 end_for:
return(krpo_ret_vec2)
end_proc:


/* ********************************* */
/* Yoney Kronecker uslusunun belir-  */
/* lenimi			     */
/* ********************************* */

kroneckerPower := proc(krp_u,krp_j)
begin
 if krp_j < 0 then
  return(Mat([0])):
 elif krp_j = 0 then
  return(Mat([1])):
 end_if: 
 krp_retvec := krp_u:
 for krp_i from 2 to krp_j do 
  krp_retvec:=linalg::kroneckerProduct(krp_retvec
             , krp_u)
 end_for:
return(krp_retvec): 
end_proc:

/* ********************************* */
/* Kronecker uslu toplamdizi katsayi */
/* belirlenimi (bir islev icin)	     */
/* ********************************* */

F_bul := proc(rx, F_bul_it1)
begin
 if F_bul_it1 = 0 then
  return(evalAt(rx, (x1=0,x2=0))):
 end_if:
 tmp_F_bul:=(1/(F_bul_it1!) \
           * uygula(kroneckerPowerOp(GradYoneyi(D1,D2)
           , F_bul_it1), rx)): 
 return(evalAt(tmp_F_bul,(x1=0, x2=0))):
end_proc:


/* ********************************* */
/* Butun dizey katsayilarin belirle- */
/* nimi				     */
/* ********************************* */

F_asil(0):=Mat(nops(R(x1,x2)),1):
for iter_Fa_all from 1 to nops(R(x1,x2)) do 
 F_asil(0)[iter_Fa_all]:=evalAt(R(x1,x2)[iter_Fa_all], (x1=0,x2=0) ):
end_for:
for iter_F_ind from 1 to 2 do 
 F_asil(iter_F_ind):=Mat(nops(R(x1,x2))^iter_F_ind
                   , nops(R(x1,x2))):
 for iter_F_all from 1 to nops(R(x1,x2)) do 
  F_asil(iter_F_ind):=linalg::setCol(F_asil(iter_F_ind)
                     , iter_F_all, F_bul(R(x1,x2)[iter_F_all]
                     , iter_F_ind)): 
 end_for:
end_for:

F_asil(1):=linalg::transpose(F_asil(1)):
F_asil(2):=linalg::transpose(F_asil(2)):

/* ********************************* */
/* Baslangic kosullari burada be-    */
/* lirtilebilir, ya da simgecil du-  */
/* zeyde birakilabilir.	 	     */
/* ********************************* */

a1:=.1:
a2:=.2:

bas_yoney:=Mat([a1,a2]):

cozum:=Pet::sdmode(F_asil(0), F_asil(1), F_asil(2), bas_yoney, 3):

for it_i from 0 to 1 step 0.1 do 
 print(NoNL,expr2text(it_i)."\t".expr2text(evalAt(cozum[1,1]
  ,[t=it_i]))."\t".expr2text(
  evalAt(cozum[2,1],[t=it_i]))."\n"):  
end_for:


quit:


/* ********************************* */
/* Betik sonu		             */
/* ********************************* */
