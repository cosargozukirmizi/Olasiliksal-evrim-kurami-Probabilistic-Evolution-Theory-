
   *----*    MuPAD Pro 4.0.6 -- The Open Computer Algebra System
  /|   /|
 *----* |    Copyright (c)  1997 - 2008  by SciFace Software
 | *--|-*                   All rights reserved.
 |/   |/
 *----*      Licensed to:   be

>> /*
&> 
&> Copyright (C) 2015  Cosar Gozukirmizi
&> 
&>     
&> This program is free software: you can redistribute it and/or modify
&> it under the terms of the GNU General Public License as published by
&> the Free Software Foundation, either version 3 of the License, or
&> (at your option) any later version.
&> 
&> This program is distributed in the hope that it will be useful,
&> but WITHOUT ANY WARRANTY; without even the implied warranty of
&> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
&> GNU General Public License for more details.
&> 
&> You should have received a copy of the GNU General Public License
&> along with this program.  If not, see <http://www.gnu.org/licenses/>.
&> 
&> */
>> 
>> /* ********************************* */
>> /* Bu betik, sag yani ikinci derece  */
>> /* cokcokterimli olan bir 2 bilinme- */
>> /* yenli dizgenin olasiliksal evrim  */
>> /* yaklasimi ve degismezlik eklenim- */ 
>> /* li uzay genisletimi ile cozumu i- */ 
>> /* cin atilan adimlari icermektedir. */
>> /* bita ve ksi eniyileyimi eklenmis- */
>> /* tir. Ksi, DEUG baglaminda eklem-  */
>> /* lenen sayildir.                   */
>> /* Son guncelleyim: 24 Agustos 2015  */
>> /* ********************************* */
>> 
>> package("Squtelmat"):
>> package("Pet"):
>> DIGITS:=40:
>> 
>> /* ********************************* */
>> /* Goreturev isleclerinin tanimi     */
>> /* ********************************* */
>> 
>> D1 := (y) -> diff(y,x1):
>> D2 := (y) -> diff(y,x2):
>> 
>> /* ********************************* */
>> /* Sag yan islevlerinin belirtimi    */
>> /* ********************************* */
>> 
>> r1:= (x1,x2)-> x1+x2+x1*x2:
>> r2:= (x1,x2)-> x1-x2^2+1:
>> 
>> Mat := Dom::Matrix():
>> 
>> /* ********************************* */
>> /* Yonelegim yoneyinin tanimi        */
>> /* ********************************* */
>> 
>> GradYoneyi := () -> Mat([[args()]]):
>> 
>> /* ********************************* */
>> /* Sag yan isleverini iceren yoney   */
>> /* ********************************* */
>> 
>> R := ()-> Mat([r1(args()),r2(args())]):
>> 
>> /* ********************************* */
>> /* Islec yoneyinin iccarpim ile yo-  */
>> /* neye etki ettirimi		     */
>> /* ********************************* */
>> 
>> uygula := proc(u_gy, u_f)
&> begin
&>  u_retvec:=Mat(nops(u_gy),1):
&>   for u_i from 1 to nops(u_gy) do
&>    u_retvec[u_i]:=u_gy[u_i](u_f)
&>   end_for:
&>  return(u_retvec):
&> end_proc:
>> 
>> /* ********************************* */
>> /* Islec yoneyinin Kronecker uslusu- */
>> /* nun belirlenimi 		     */
>> /* ********************************* */
>> 
>> kroneckerPowerOp := proc(krpo_u,krpo_j)
&> begin
&>  if krpo_j = 0 then 
&>   print("kroneckerPowerOp not defined for 0"):
&>  end_if:
&>  krpo_ret_vec:=krpo_u:
&>  if krpo_j = 1 then 
&>   return( krpo_ret_vec ):
&>  end_if:
&>   
&>  for krpo_it1 from 2 to krpo_j do
&>   krpo_ret_vec2:=Mat(nops(krpo_ret_vec)
&>                *nops(krpo_u),1):
&>   krpo_ind:=1:  
&>   for krpo_it2 from 1 to nops(krpo_ret_vec) do 
&>    for krpo_it3 from 1 to nops(krpo_u) do
&>     krpo_ret_vec2[krpo_ind]:=krpo_ret_vec[krpo_it2] \
&>                             @ krpo_u[krpo_it3]:
&>     krpo_ind:=krpo_ind+1:
&>    end_for:    
&>   end_for:
&>   krpo_ret_vec:=krpo_ret_vec2:  
&>  end_for:
&> return(krpo_ret_vec2)
&> end_proc:
>> 
>> 
>> /* ********************************* */
>> /* Yoney Kronecker uslusunun belir-  */
>> /* lenimi			     */
>> /* ********************************* */
>> 
>> kroneckerPower := proc(krp_u,krp_j)
&> begin
&>  if krp_j < 0 then
&>   return(Mat([0])):
&>  elif krp_j = 0 then
&>   return(Mat([1])):
&>  end_if: 
&>  krp_retvec := krp_u:
&>  for krp_i from 2 to krp_j do 
&>   krp_retvec:=linalg::kroneckerProduct(krp_retvec
&>              , krp_u)
&>  end_for:
&> return(krp_retvec): 
&> end_proc:
>> 
>> /* ********************************* */
>> /* Kronecker uslu toplamdizi katsayi */
>> /* belirlenimi (bir islev icin)	     */
>> /* ********************************* */
>> 
>> F_bul := proc(rx, F_bul_it1)
&> begin
&>  if F_bul_it1 = 0 then
&>   return(evalAt(rx, (x1=0,x2=0))):
&>  end_if:
&>  tmp_F_bul:=(1/(F_bul_it1!) \
&>            * uygula(kroneckerPowerOp(GradYoneyi(D1,D2)
&>            , F_bul_it1), rx)): 
&>  return(evalAt(tmp_F_bul,(x1=0, x2=0))):
&> end_proc:
>> 
>> 
>> /* ********************************* */
>> /* Butun dizey katsayilarin belirle- */
>> /* nimi				     */
>> /* ********************************* */
>> 
>> F_asil(0):=Mat(nops(R(x1,x2)),1):
>> for iter_Fa_all from 1 to nops(R(x1,x2)) do 
&>  F_asil(0)[iter_Fa_all]:=evalAt(R(x1,x2)[iter_Fa_all], (x1=0,x2=0) ):
&> end_for:
>> for iter_F_ind from 1 to 2 do 
&>  F_asil(iter_F_ind):=Mat(nops(R(x1,x2))^iter_F_ind
&>                    , nops(R(x1,x2))):
&>  for iter_F_all from 1 to nops(R(x1,x2)) do 
&>   F_asil(iter_F_ind):=linalg::setCol(F_asil(iter_F_ind)
&>                      , iter_F_all, F_bul(R(x1,x2)[iter_F_all]
&>                      , iter_F_ind)): 
&>  end_for:
&> end_for:
>> 
>> F_asil(1):=linalg::transpose(F_asil(1)):
>> F_asil(2):=linalg::transpose(F_asil(2)):
>> 
>> /* ********************************* */
>> /* Baslangic kosullari burada be-    */
>> /* lirtilebilir, ya da simgecil du-  */
>> /* zeyde birakilabilir.	 	     */
>> /* ********************************* */
>> 
>> a1:=.1:
>> a2:=.2:
>> 
>> bas_yoney:=Mat([a1,a2]):
>> 
>> cozum:=Pet::sdmode(F_asil(0), F_asil(1), F_asil(2), bas_yoney, 3):
>> 
>> for it_i from 0 to 1 step 0.1 do 
&>  print(NoNL,expr2text(it_i)."\t".expr2text(evalAt(cozum[1,1]
&>   ,[t=it_i]))."\t".expr2text(
&>   evalAt(cozum[2,1],[t=it_i]))."\n"):  
&> end_for:
0	0.1	0.2
0.1	0.1401614439962379133588481506217046099317	0\
.3053685151499861596102515739106329289874
0.2	0.1983524186253649552800077258514609611008	0\
.4090099734954795106607644896048031537585
0.3	0.277274380631146268810499688767684286902	0.5101860217996680216035163703829133679364
0.4	0.3798257768319612750330230688091035382638	0\
.6080994590610882110720755283170794089868
0.5	0.5091128744264829306516908163948804450604	0\
.7018909197370027526609602860403480169517
0.6	0.6684611067853773327751867361556522410714	0\
.7906353975208069987699678625083121879839
0.7	0.8614269572969262849480141221177010577457	0\
.8733386026590020258784804077393517061611
0.8	1.091810404772246891330572236949678768585	0.9489331455010150262635951170115038615027
0.9	1.363667954891210878511850788840266259429	1.016274538671136257580689649234767336654
1.0	1.681326283184729678887168378553657871503	1.074137009935613621049177832943696936159
>> 
>> 
>> quit:
